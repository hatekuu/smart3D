import React, { useState, useEffect } from 'react';
import PrintList from './component/3dcontroll/3dprintList';
import { getPrinter, getFilePrint,updateStatus } from '../../api/3dprint';
import { Line } from 'react-chartjs-2';
import ChartDataLabels from 'chartjs-plugin-datalabels';
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';
ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);

const PrintControll = () => {
  const [user, setUser] = useState(null);
  const [printers, setPrinters] = useState([]);
  const [files, setFiles] = useState([]); 
  const [printerId, setPrinterId] = useState('');
  const [processData, setProcessData]=useState({})
  const [job,setJob]=useState({})
  const [state,setState]= useState('')
  const [temp,setTemp]=useState({})
  const [tempHistory, setTempHistory] = useState([]); // L∆∞u l·ªãch s·ª≠ nhi·ªát ƒë·ªô
  const [timeLabels, setTimeLabels] = useState([]); // L∆∞u timestamp


  useEffect(() => {
    setUser(JSON.parse(localStorage.getItem('userData') || '{}'));
    fetchData();
  }, []);
  useEffect(() => {
    let interval;
    if (printerId) {
      getFile(printerId); // G·ªçi ngay l·∫ßn ƒë·∫ßu
      interval = setInterval(() => {
        getFile(printerId);
      }, 1000); // G·ªçi l·∫°i m·ªói 5 gi√¢y
    }
    return () => clearInterval(interval); // D·ªçn d·∫πp khi unmount ho·∫∑c printerId thay ƒë·ªïi
  }, [printerId]);
  
  const fetchData = async () => {
    try {
      const result = await getPrinter();
      if (result) {
        setPrinters(result);
        
      }
    } catch (error) {
      console.error(error);
    }
  };
 
  const getFile = async (printerId) => {
    try {
      const result = await getFilePrint({ printId: printerId });
   
      if (result?.fileList) {
        setFiles(result.fileList);
      }
      if(result?.filedata)
      {
        setState(result.filedata.printData.state)
     
        setProcessData(result.filedata.printData.progress)
        setJob(result.filedata.printData.job)
        if(result?.filedata?.tem_data?.length>0){
          setTemp(result?.filedata?.tem_data[0]?.temperature.tool0)
        const currentTemp = result.filedata.tem_data?.[0]?.temperature?.tool0?.actual || 0;

        // C·∫≠p nh·∫≠t l·ªãch s·ª≠ nhi·ªát ƒë·ªô
        setTempHistory((prev) => [...prev.slice(-5), currentTemp]); // Ch·ªâ gi·ªØ 20 gi√° tr·ªã g·∫ßn nh·∫•t
        setTimeLabels((prev) => [...prev.slice(-5), new Date().toLocaleTimeString()]); // Th√™m timestamp
      }
      }
    } catch (error) {
      console.error(error);
    }
  };
  const UpdateStatus= async(printerId,status)=>{
    try {
        const result = await updateStatus({ printId: printerId,status:status });
        console.log(result)
        alert("ƒê·ªïi tr·∫°ng th√°i th√†nh c√¥ng")
      } catch (error) {
        console.error(error);
      }
  }
  const selectedPrinter = printers.find((p) => p._id === printerId);
  const formatTime = (seconds) => {
    const hours = Math.floor(seconds / 3600); // T√≠nh gi·ªù
    const minutes = Math.floor((seconds % 3600) / 60); // T√≠nh ph√∫t
    const remainingSeconds = seconds % 60; // T√≠nh gi√¢y
  
    // Tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng "gi·ªù:ph√∫t:gi√¢y"
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
  };
  return (
    <div>
      {!printerId && <PrintList printers={printers} setPrinterId={setPrinterId} getFile={getFile} />}
      <div className="print3d-container">
        {printerId && selectedPrinter && (
          <div className="selected-printer">
            <h3>M√°y In ƒë√£ ch·ªçn</h3>
            <div className="printer-info">
              <p><strong>T√™n:</strong> {selectedPrinter.Printer.Name}</p>
              <p><strong>Kh·ªï in:</strong> {selectedPrinter.Printer.Size}</p>
              <p><strong>V·∫≠t li·ªáu:</strong> {selectedPrinter.Printer.Filament}</p>
              <p><strong>M√†u:</strong> {selectedPrinter.Printer.Color}</p>
              
              {processData &&(
                <div>
                  <p><strong>Tr·∫°ng th√°i:</strong> {state}</p>
                  {processData?.completion != null && (
                  <p><strong>Ti·∫øn tr√¨nh hi·ªán t·∫°i:</strong> {(processData?.completion).toFixed(2)}%</p>
                         )}

                  <p><strong>Th·ªùi gian c√≤n l·∫°i:</strong> {processData?.printTimeLeft ? formatTime(processData?.printTimeLeft) : "00:00:00"}</p>
                  <p><strong>Nhi·ªát ƒë·ªô ƒë·∫ßu ƒë√πn mong mu·ªën:</strong> {temp?.target }</p>
                  <p><strong>File ƒëang in:</strong> {job?.file?.name }</p>
                 </div>
              )}
  {/* Bi·ªÉu ƒë·ªì nhi·ªát ƒë·ªô */}
  {tempHistory!=0&&(
      <div style={{ width: "800px", height: "500px" ,position:"relative",paddingBottom:"60px"}}>

      <h3>Bi·ªÉu ƒë·ªì nhi·ªát ƒë·ªô</h3>
      <Line
      data={{
        labels: timeLabels, // Nh√£n th·ªùi gian
        datasets: [
          {
            label: "Nhi·ªát ƒë·ªô (¬∞C)",
            data: tempHistory, // D·ªØ li·ªáu nhi·ªát ƒë·ªô th·ª±c t·∫ø
            borderColor: "rgb(255, 99, 132)",
            backgroundColor: "rgba(255, 99, 132, 0.2)",
          
          },
        ],
      }}
      options={{
        responsive: true,
        maintainAspectRatio: false, // T·∫Øt t·ª∑ l·ªá m·∫∑c ƒë·ªãnh ƒë·ªÉ c√≥ th·ªÉ thay ƒë·ªïi chi·ªÅu cao
        plugins: {
          datalabels: {
            display: true, // Hi·ªÉn th·ªã gi√° tr·ªã
            color: "black", // M√†u ch·ªØ
            anchor: "end", // V·ªã tr√≠ hi·ªÉn th·ªã (start, center, end)
            align: "top", // Canh ch·ªânh ch·ªØ (top, bottom, center)
            font: {

              size: 12, // K√≠ch th∆∞·ªõc ch·ªØ
            },
            formatter: (value) => `${value}¬∞C`, // ƒê·ªãnh d·∫°ng hi·ªÉn th·ªã
          },
        },
        scales: {
      
          y: {
            min: 0,
            max: 250,
            ticks: {
              stepSize: 50,
              padding: 30, // ƒê·∫©y c√°c gi√° tr·ªã tr√™n tr·ª•c Y ra xa tr·ª•c

            },
          },
        },
      }}

      plugins={[ChartDataLabels]}
      />
</div>
  )}
      
              <button className="reset-printer-button" onClick={() => setPrinterId('')}>üîÑ Ch·ªçn l·∫°i m√°y in</button>
              <button className="reset-printer-button" onClick={() => UpdateStatus(printerId,"printing")}>B·∫Øt ƒë·∫ßu in</button>
              <button className="reset-printer-button" onClick={() => UpdateStatus(printerId,"writing_done")}>D·ª´ng in</button>
              <button className="reset-printer-button" onClick={() => UpdateStatus(printerId,"writing")}>B·∫Øt ƒë·∫ßu l∆∞u file</button>
            </div>
          </div>
        )}
         {files.length > 0 && (
            <div className="file-list">
              <h3>Danh s√°ch file:</h3>
              <ul>
                {files.map((file, index) => (
                  <li key={index}>{file}</li>
                ))}
              </ul>
           
            </div>
          )}
        
      
      </div>
    </div>
  );
};

export default PrintControll;
