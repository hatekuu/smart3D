import React, { useEffect, useState } from "react";
import { getOrders, updateOrderStatus } from "../../api/manager";
import { FaCheckCircle, FaTimesCircle, FaTruck } from "react-icons/fa";
import "./css/ManagerOrders.css";

const statusText = {
  pending: "üïí ƒêang ƒë·ª£i x√°c nh·∫≠n ƒë∆°n",
  cancelled: "‚ùå ƒê√£ h·ªßy ƒë∆°n",
  processing: "üì¶ ƒêang chu·∫©n b·ªã h√†ng",
  shipped: "üöö ƒê√£ giao h√†ng",
  completed: "‚úÖ ƒê√£ nh·∫≠n h√†ng"
};

const ManagerOrders = () => {
  const [orders, setOrders] = useState([]);
  const [showProduct, setShowProduct] = useState({}); // Qu·∫£n l√Ω tr·∫°ng th√°i hi·ªÉn th·ªã s·∫£n ph·∫©m cho t·ª´ng ƒë∆°n h√†ng

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const data = await getOrders();
        console.log(data);
        setOrders(data);
      } catch (error) {
        console.error("L·ªói l·∫•y ƒë∆°n h√†ng:", error);
      }
    };
    fetchOrders();
  }, []);

  const handleUpdateStatus = async (orderId, newStatus) => {
    try {
      await updateOrderStatus({ orderId, newStatus });
      setOrders((prevOrders) =>
        prevOrders.map((order) =>
          order._id === orderId ? { ...order, status: newStatus } : order
        )
      );
    } catch (error) {
      console.error("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
    }
  };

  // H√†m toggle hi·ªÉn th·ªã s·∫£n ph·∫©m cho ƒë∆°n h√†ng
  const toggleShowProduct = (orderId) => {
    setShowProduct((prev) => ({
      ...prev,
      [orderId]: !prev[orderId], // ƒê·∫£o tr·∫°ng th√°i hi·ªÉn th·ªã s·∫£n ph·∫©m
    }));
  };

  return (
    <div className="manager-orders">
      <h2>Qu·∫£n l√Ω ƒê∆°n H√†ng</h2>
      <table className="orders-table">
        <thead>
          <tr>
            <th>M√£ ƒë∆°n</th>
            <th>Lo·∫°i ƒë∆°n h√†ng</th>
            <th>Ph∆∞∆°ng th·ª©c thanh to√°n</th>
            <th>danh s√°ch s·∫£n ph·∫©m</th>
            <th>Ng√†y ƒë·∫∑t</th>
            <th>D·ªãa ch·ªâ</th>
            <th>Tr·∫°ng th√°i</th>
            <th>H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          {orders.map((order) => (
            <React.Fragment key={order._id}>
              <tr>
                <td>{order._id}</td>
                <td>{order.ordertype}</td>
                <td>{order.paymentMethod ? order.paymentMethod : "Cash"}</td>
                <td>
                 {order.ordertype==="ƒê∆°n h√†ng s·∫£n ph·∫©m"?(
 <button onClick={() => toggleShowProduct(order._id)}>
 {showProduct[order._id] ? "·∫®n s·∫£n ph·∫©m" : "Xem s·∫£n ph·∫©m"}
</button>
                 ):(
                  <p></p>
                 )}
                 
                </td>
                <td>{new Date(order.createdAt).toLocaleString()}</td>
                <td>{order.address.address}-{order.address.phone}-{order.address.note}</td>
                <td className={`status ${order.status}`}>{statusText[order.status]}</td>
            
                <td>
                  {order.status === "pending" && (
                    <>
                      <button
                        className="confirm-btn"
                        onClick={() => handleUpdateStatus(order._id, "processing")}
                      >
                        <FaCheckCircle /> X√°c nh·∫≠n
                      </button>
                      <button
                        className="cancel-btn"
                        onClick={() => handleUpdateStatus(order._id, "cancelled")}
                      >
                        <FaTimesCircle /> H·ªßy ƒë∆°n
                      </button>
                    </>
                  )}
                  {order.status === "processing" && (
                    <button
                      className="shipped-btn"
                      onClick={() => handleUpdateStatus(order._id, "shipped")}
                    >
                      <FaTruck /> ƒê√£ giao h√†ng
                    </button>
                  )}
                  {order.status !== "pending" && order.status !== "processing" && (
                    <span>Kh√¥ng th·ªÉ thay ƒë·ªïi</span>
                  )}
                </td>
              </tr>

              {/* Hi·ªÉn th·ªã s·∫£n ph·∫©m khi showProduct cho ƒë∆°n h√†ng n√†y l√† true */}
              {showProduct[order._id] && order.productInfo && (
                <tr>
                  <td colSpan="7">
                    <table className="product-info-table">
                      <thead>
                        <tr>
                          <th>T√™n s·∫£n ph·∫©m</th>
                          <th>S·ªë l∆∞·ª£ng</th>
                          <th>Gi√°</th>
                        </tr>
                      </thead>
                      <tbody>
                        {order.productInfo.map((product) => (
                          <tr key={product._id}>
                            <td>{product.name}</td>
                            <td>{product.quantity}</td>
                            <td>{product.price}</td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </td>
                </tr>
              )}
            </React.Fragment>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ManagerOrders;
